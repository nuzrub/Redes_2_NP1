

Recursos:
	Básico
	Interface cliente 
	Interface servidor
	Sistema de status
	Comunicação binária.
		= 6 + 1 + 0.5 + 2 + 2 = 11.5 pts (1.5 de folga).


Eu devo possuir alguma forma de estado do cliente:
	Nome, Status, Ip, ID
		Não é necessário saber a sala que ele tá, pois não vão ter múltiplas salas
		Nome (ou nick) é importante
		Status é pro extra
		ID é pra poder identificar o cliente sem precisar duma string
		IP e Porta do cliente é algo que fica no socket e não precisa ficar no estado.


Em linhas gerais, o protocolo desenvolvido funciona da seguinte forma:
	// Conexão
	O cliente se conecta ao servidor e envia:
		Seu nome
		Seu status
		O ip eu já tenho pela conexão.
	O servidor responde:
		ID do cliente

	Em seguida, o servidor tem de alertar a todos os clientes do cliente novo
	e alertar o cliente novo de todos os clientes antigos.
	Isso é feito com uma mensagem de notificação de usuário.
	Ao todo, são 2n-2 mensagens. 
		n-1 mensagens, uma para cada outro cliente alertando do novo cliente
		n-1 mensagens, todas para o novo cliente, cada uma falando de um dos clientes antigos.
	
	Por fim, o server volta ao modo standby
		Fica esperando por mensagens e novos clientes



	// Envio de Mensagem
	Toda a troca de mensagens é feita por uma mensagem do tipo SendMessage.
	Essa mensagem carrega o ID do remetente, o ID do destinatário e o conteúdo.
	Mensagens enviadas para o ID 0 (zero) são para o chat global.
	Mensagens enviadas para um ID não zero são mensagens privadas.
	Em detalhes:
		O cliente envia uma mensagem. Em outras palavras, ele envia:
			Que é uma mensagem
			De quem ela é (ID)
			Pra quem (ID, 0 para público)
			O tamanho da mensagem
			A mensagem em si.
		O servidor recebe.
			Envia pros envolvidos (pro destinatário ou pra todos)
			Que é uma mensagem
			De quem ela é (ID)
			Para quem (ID, 0 para público)
			O tamanho da mensagem
			A mensagem em si.
		Quando o(s) destino(s) recebem a mensagem, eles conseguem deduzir
		se ela é privada ou global pelo ID do destinatário.



	// Troca de estado
	Funciona da mesma forma que enviar uma mensagem
	Mas envia o estado ao invés da string.



	// Desconectar e Kick
	O desconectar e o kickar são implementados iguais.
	Na prática, o desconectar é o cliente pedindo pra ser kickado.
	Em ambos os casos, o cliente vê que foi desconectado.
	Em detalhes, o passo-a-passo é:
		O cliente envia uma mensagem
			Que é de desconectar
			Quem ele é (ID)
		O Servidor kicka o cliente:
			Envia uma mensagem de kick pra todos
			Quem foi kickado (ID)
			O servidor desconecta o cliente.
		Ao receber uma mensagem de kick:
			Apagar a janela de PM com esse cara
			Tirar ele da lista



	// Servidor é Desligado
	Caso o servidor seja desligado, ele envia uma mensagem de Kick
	para cada usuário, derrubando completamente todos os nós envolvidos.
	Em seguida, ele é efetivamente derrubado.
		