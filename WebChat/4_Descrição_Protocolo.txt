

A seguir, é apresentado o protocolo de comunicação e como ele é 
traduzido de forma a ser enviado como binário

Todo comando possui a seguinte estrutura:
	Tipo + Paramêtros...

E seguem as seguintes convenções
	Cada tipo de mensagem possui seu ID único
	Ao ler o ID, é possível deduzir os parâmetros que seguem

	Sizeof é a lenght de um array. 
	Strings são tratadas como arrays de chars



// Conexão do cliente
CONNECTION_REQUEST  Status Sizeof(Nome) NOME
	Direção: Cliente -> Servidor
CONNECTION_RESPONSE ID
	Direção: Servidor -> Cliente

// Informar da existencia de um outro Cliente
NOTIFY_NEW_CLIENT ID Sizeof(Nome) NOME
	Direção: Servidor -> Cliente


// Enviar Mensagem
SEND_MESSAGE From To Sizeof(Message) Message
	Direção: Cliente -> Servidor (publicar mensagem)
			 Servidor -> Todos (propagação da mensagem)
// Trocar estado
CHANGE_STATE ID NewStatus
	Direção: Cliente -> Servidor (publicar mensagem)
			 Servidor -> Todos (propagação da mensagem)
// Pedir pra sair
DISCONNECT ID
	Direção: Cliente -> Servidor (publicar mensagem)
		Essa mensagem volta como um kick. Na prática, 
		Desconectar é visto como pedir pra ser kickado.


// Kick / Disconectar
KICK ID
	Direção: Servidor -> Todos



Comandos:
	CONNECTION_REQUEST
	CONNECTION_RESPONSE
	NOTIFY_NEW_CLIENT
	SEND_MESSAGE
	CHANGE_STATE
	DISCONNECT
	KICK

Formato binário:
	Os tipos de mensagem são Ints
	IDs são Ints
	Sizeofs retornam Ints
	Mensagens são arrays de caracteres em UTF-8
